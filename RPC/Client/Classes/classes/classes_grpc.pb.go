// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: classes.proto

package classes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TesteServiceClient is the client API for TesteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TesteServiceClient interface {
	AddMatricula(ctx context.Context, in *Matricula, opts ...grpc.CallOption) (*Matricula, error)
	UpdateNota(ctx context.Context, in *UpdateNotaRequest, opts ...grpc.CallOption) (*Matricula, error)
	UpdateFaltas(ctx context.Context, in *UpdateFaltasRequest, opts ...grpc.CallOption) (*Matricula, error)
	GetAlunos(ctx context.Context, in *AlunoRequest, opts ...grpc.CallOption) (*AlunoResponse, error)
	GetDisciplinas(ctx context.Context, in *DisciplinaRequest, opts ...grpc.CallOption) (*DisciplinaResponse, error)
}

type testeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTesteServiceClient(cc grpc.ClientConnInterface) TesteServiceClient {
	return &testeServiceClient{cc}
}

func (c *testeServiceClient) AddMatricula(ctx context.Context, in *Matricula, opts ...grpc.CallOption) (*Matricula, error) {
	out := new(Matricula)
	err := c.cc.Invoke(ctx, "/TesteService/AddMatricula", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testeServiceClient) UpdateNota(ctx context.Context, in *UpdateNotaRequest, opts ...grpc.CallOption) (*Matricula, error) {
	out := new(Matricula)
	err := c.cc.Invoke(ctx, "/TesteService/UpdateNota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testeServiceClient) UpdateFaltas(ctx context.Context, in *UpdateFaltasRequest, opts ...grpc.CallOption) (*Matricula, error) {
	out := new(Matricula)
	err := c.cc.Invoke(ctx, "/TesteService/UpdateFaltas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testeServiceClient) GetAlunos(ctx context.Context, in *AlunoRequest, opts ...grpc.CallOption) (*AlunoResponse, error) {
	out := new(AlunoResponse)
	err := c.cc.Invoke(ctx, "/TesteService/GetAlunos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testeServiceClient) GetDisciplinas(ctx context.Context, in *DisciplinaRequest, opts ...grpc.CallOption) (*DisciplinaResponse, error) {
	out := new(DisciplinaResponse)
	err := c.cc.Invoke(ctx, "/TesteService/GetDisciplinas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TesteServiceServer is the server API for TesteService service.
// All implementations must embed UnimplementedTesteServiceServer
// for forward compatibility
type TesteServiceServer interface {
	AddMatricula(context.Context, *Matricula) (*Matricula, error)
	UpdateNota(context.Context, *UpdateNotaRequest) (*Matricula, error)
	UpdateFaltas(context.Context, *UpdateFaltasRequest) (*Matricula, error)
	GetAlunos(context.Context, *AlunoRequest) (*AlunoResponse, error)
	GetDisciplinas(context.Context, *DisciplinaRequest) (*DisciplinaResponse, error)
	mustEmbedUnimplementedTesteServiceServer()
}

// UnimplementedTesteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTesteServiceServer struct {
}

func (UnimplementedTesteServiceServer) AddMatricula(context.Context, *Matricula) (*Matricula, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMatricula not implemented")
}
func (UnimplementedTesteServiceServer) UpdateNota(context.Context, *UpdateNotaRequest) (*Matricula, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNota not implemented")
}
func (UnimplementedTesteServiceServer) UpdateFaltas(context.Context, *UpdateFaltasRequest) (*Matricula, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFaltas not implemented")
}
func (UnimplementedTesteServiceServer) GetAlunos(context.Context, *AlunoRequest) (*AlunoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlunos not implemented")
}
func (UnimplementedTesteServiceServer) GetDisciplinas(context.Context, *DisciplinaRequest) (*DisciplinaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisciplinas not implemented")
}
func (UnimplementedTesteServiceServer) mustEmbedUnimplementedTesteServiceServer() {}

// UnsafeTesteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TesteServiceServer will
// result in compilation errors.
type UnsafeTesteServiceServer interface {
	mustEmbedUnimplementedTesteServiceServer()
}

func RegisterTesteServiceServer(s grpc.ServiceRegistrar, srv TesteServiceServer) {
	s.RegisterService(&TesteService_ServiceDesc, srv)
}

func _TesteService_AddMatricula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Matricula)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesteServiceServer).AddMatricula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TesteService/AddMatricula",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesteServiceServer).AddMatricula(ctx, req.(*Matricula))
	}
	return interceptor(ctx, in, info, handler)
}

func _TesteService_UpdateNota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesteServiceServer).UpdateNota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TesteService/UpdateNota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesteServiceServer).UpdateNota(ctx, req.(*UpdateNotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TesteService_UpdateFaltas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFaltasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesteServiceServer).UpdateFaltas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TesteService/UpdateFaltas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesteServiceServer).UpdateFaltas(ctx, req.(*UpdateFaltasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TesteService_GetAlunos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlunoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesteServiceServer).GetAlunos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TesteService/GetAlunos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesteServiceServer).GetAlunos(ctx, req.(*AlunoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TesteService_GetDisciplinas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisciplinaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesteServiceServer).GetDisciplinas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TesteService/GetDisciplinas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesteServiceServer).GetDisciplinas(ctx, req.(*DisciplinaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TesteService_ServiceDesc is the grpc.ServiceDesc for TesteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TesteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TesteService",
	HandlerType: (*TesteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMatricula",
			Handler:    _TesteService_AddMatricula_Handler,
		},
		{
			MethodName: "UpdateNota",
			Handler:    _TesteService_UpdateNota_Handler,
		},
		{
			MethodName: "UpdateFaltas",
			Handler:    _TesteService_UpdateFaltas_Handler,
		},
		{
			MethodName: "GetAlunos",
			Handler:    _TesteService_GetAlunos_Handler,
		},
		{
			MethodName: "GetDisciplinas",
			Handler:    _TesteService_GetDisciplinas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "classes.proto",
}
